import os
import queue
import socket
import sys
import threading
from tabulate import tabulate
import re
import argparse

class VulnerablistyScanner:
    def __init__(self):
        self.service_patterns = {
            "SSH": ["SSH", "OpenSSH"],
            "HTTP": ["HTTP", "Apache", "nginx"],
            "FTP": ["FTP", "vsftpd", "FileZilla"],
        }
        self.print_lock = threading.Lock()

    def is_valid_ipv4(self, ip):
        ip_pattern = r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$'
        return re.match(ip_pattern, ip) is not None

    def is_valid_port(self,port):
        try:
            port_num = int(port)
            return 0 <= port_num <= 65535
        except ValueError:
            return False

    def detect_service(self,banner):
        for service, patterns in self.service_patterns.items():
            for pattern in patterns:
                if pattern in banner:
                    return service
        return "UNKNOWN"
    def print_port_info(self, port,status, banner=None, service=None, version=None):
         padding = 60

         if status == "open":
             message= f"Port {port} is open! Banner: {banner} Service: {service} Version:{version} "
         else:
             message = f"Port {port} is {status}"
         with self.print_lock:
             print(message.ljust(padding), end="\r")

    def scan_port(self, target, port):
        open_ports = []
        port_info = []
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(0.5)
            result = sock.connect_ex((target, port))
            if result == 0:
                print(f"Port {port} is open!")
                open_ports.append(port)
                banner = sock.recv(1024).decode("utf-8").strip()
                try:
                    service = self.detect_service(banner)
                    version = self.get_service_version(service, banner)
                    port_info.append([port, service, version])
                    self.print_port_info(port, "open", banner, service, version)
                except socket.error:
                    pass
                finally:
                    sock.close()
            elif result == 11:
                self.print_port_info(port, "Taking longer to respond")
            else:
                self.print_port_info(port, "is closed :(")
        except KeyboardInterrupt:
            print("Exiting...")
            sys.exit()
        except socket.gaierror:
            print("Host could not be resolved.")
            sys.exit()
        except socket.error:
            self.print_port_info(port, "couldn't connect")
        finally:
            sock.close()

    def port_scan_threaded(self, target, ports):
        open_ports = []
        port_info = []
        threads = []
        max_threads = 50

        def worker():
            while True:
                port = port_queue.get()
                if port is None:
                    break
                self.scan_port(target, port)
                port_queue.task_done()
        port_queue = queue.Queue()

        for _ in range(max_threads):
            t = threading.Thread(target=worker)
            t.start()

        for port in ports:
            port_queue.put(port)

        port_queue.join()

        for _ in range(max_threads):
            port_queue.put(None)

        for t in threads:
            t.join()

        headers = ["Port", "Service", "Version"]
        print("\n",tabulate(port_info, headers=headers, tablefmt="grid"))

    def extract_ssh_version(self,banner):
        version_pattern = r"SSH-2.0-(.*?)[ \n]"
        match = re.search(version_pattern, banner)

        if match:
            version = match.group(1)
            return version
        else:
            return "Unknown"

    def extract_http_version(self,banner):
        lines = banner.split("\n")
        print(lines)
        match = re.search("Server: (.+?)\s+Last-Modified: (.+)", banner)
        if match:
            version = match.group(1)
            return version
        else:
            return "Unknown"

    def extract_ftp_version(self,banner):
        parts = banner.split()
        if len(parts) >= 2:
            version = parts
            return version
        else:
            return "Unknown"

    def get_service_version(self,service, banner):
        if service == "SSH":
            return self.extract_ssh_version(banner)
        elif service == "HTTP":
            return self.extract_http_version(banner)
        elif service == "FTP":
            return self.extract_ftp_version(banner)
        return


if __name__ == "__main__":
    print("Welcome to my Basic Vulnerability Scanner!\n")
    parser = argparse.ArgumentParser(description="Basic Vulnerability Scanner")
    parser.add_argument("target", help="Target IPv4 address")
    parser.add_argument("ports_start", help="Start Port", type=int)
    parser.add_argument("ports_end", help= "Stop Port", type=int)

    args = parser.parse_args()

    scanner = VulnerablistyScanner()

    if not scanner.is_valid_ipv4(args.target):
        print("Invalid IPv4 address format!")
        sys.exit()
    if not scanner.is_valid_port(args.ports_start) or not scanner.is_valid_port(args.ports_end):
        print("Invalid port number(s). Port numbers should be between 0 and 65535")
        sys.exit()
    scanner.port_scan_threaded(args.target, range(args.ports_start, args.ports_end + 1))







