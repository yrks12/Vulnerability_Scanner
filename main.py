import socket
import sys
from tabulate import tabulate
import re
import argparse

class VulnerablistyScanner:
    def __init__(self):
        self.service_patterns = {
            "SSH": ["SSH", "OpenSSH"],
            "HTTP": ["HTTP", "Apache", "nginx"],
            "FTP": ["FTP", "vsftpd", "FileZilla"],
        }

    def is_valid_ipv4(self, ip):
        ip_pattern = r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$'
        return re.match(ip_pattern, ip) is not None

    def is_valid_port(self,port):
        try:
            port_num = int(port)
            return 0 <= port_num <= 65535
        except ValueError:
            return False

    def detect_service(self,banner):
        for service, patterns in self.service_patterns.items():
            for pattern in patterns:
                if pattern in banner:
                    return service
        return "UNKNOWN"

    def port_scan(self,target, ports_start, ports_end):
        open_ports = []
        port_info = []

        try:
            ip = socket.gethostbyname(ports_start)
        except socket.gaierror:
            print("Host could not be resolved.")
            sys.exit()
        for port in range(int(ports_start), int(ports_end) + 1):
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(0.5)
                result = sock.connect_ex((target, port))
                if result == 0:
                    print(f"Port {port} is open!")
                    open_ports.append(port)
                    banner = sock.recv(1024).decode("utf-8").strip()
                    try:
                        print(f"Banner for port {port}: {banner}")
                        service = self.detect_service(banner)
                        print(f"service for port {port}:{service}")
                        if service != "UNKNOWN":
                            version = self.get_service_version(service, banner)
                            print(f"Version for port {port} : {version}")
                            port_info.append([port, service, version])
                        else:
                            port_info.append([port, service, ""])
                    except socket.error:
                        pass
                    finally:
                        sock.close()
                elif result == 11:
                    print(f"Port {port} is taking longer to respond...")
                else:
                    print(f"Port {port} is close:(")
            except KeyboardInterrupt:
                print("Exiting...")
                sys.exit()
            except socket.gaierror:
                print("Host could not be resolved.")
                sys.exit()
            except socket.error:
                print(f"Couldn't connect to port {port}")
                continue
        headers = ["Port", "Service", "Version"]
        print(tabulate(port_info, headers=headers, tablefmt="grid"))

    def extract_ssh_version(self,banner):
        version_pattern = r"SSH-2.0-(.*?)[ \n]"
        match = re.search(version_pattern, banner)

        if match:
            version = match.group(1)
            return version
        else:
            return "Unknown"

    def extract_http_version(self,banner):
        lines = banner.split("\n")
        print(lines)
        match = re.search("Server: (.+?)\s+Last-Modified: (.+)", banner)
        if match:
            version = match.group(1)
            return version
        else:
            return "Unknown"

    def extract_ftp_version(self,banner):
        parts = banner.split()
        if len(parts) >= 2:
            version = parts
            return version
        else:
            return "Unknown"

    def get_service_version(self,service, banner):
        if service == "SSH":
            return self.extract_ssh_version(banner)
        elif service == "HTTP":
            return self.extract_http_version(banner)
        elif service == "FTP":
            return self.extract_ftp_version(banner)
        return


if __name__ == "__main__":
    print("Welcome to my Basic Vulnerability Scanner!\n")
    parser = argparse.ArgumentParser(description="Basic Vulnerability Scanner")
    parser.add_argument("target", help="Target IPv4 address")
    parser.add_argument("ports_start", help="Start Port", type=int)
    parser.add_argument("ports_end", help= "Stop Port", type=int)

    args = parser.parse_args()

    scanner = VulnerablistyScanner()

    if not scanner.is_valid_ipv4(args.target):
        print("Invalid ipv4 address format!")
        sys.exit()
    if not scanner.is_valid_port(args.ports_start) or not scanner.is_valid_port(args.ports_end):
        print("Invalid ort number(s). Port numbers should be between 0 and 65535")
        sys.exit()
    scanner.port_scan(args.target,args.ports_start,args.ports_end)







